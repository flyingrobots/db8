BEGIN;
SELECT plan(18);

-- RPC existence: room_create(topic, cfg, client_nonce)
SELECT ok(
  to_regprocedure('room_create(text,jsonb,text)') IS NOT NULL,
  'room_create exists'
);

-- RPC behavior: room_create seeds participants and round 0
DO $$
DECLARE
  rid uuid;
  rid2 uuid;
  participant_count integer;
  round_count integer;
  dup_count integer;
BEGIN
  SELECT room_create('Demo room', jsonb_build_object('participant_count', 3, 'submit_minutes', 1), 'nonce-demo-1') INTO rid;
  PERFORM ok(rid IS NOT NULL, 'room_create returned room id');
  PERFORM ok(EXISTS (SELECT 1 FROM rooms WHERE id = rid AND title = 'Demo room'), 'room exists with correct title');

  SELECT count(*) INTO participant_count FROM participants WHERE room_id = rid;
  PERFORM ok(participant_count = 3, 'room_create seeded participants');
  PERFORM ok(NOT EXISTS (
    SELECT 1 FROM participants WHERE room_id = rid AND anon_name NOT LIKE 'anon_%'
  ), 'participant anon names use anon_N pattern');

  SELECT count(*) INTO round_count FROM rounds WHERE room_id = rid AND idx = 0 AND phase = 'submit' AND submit_deadline_unix > 0;
  PERFORM ok(round_count = 1, 'room_create created initial round 0 with valid deadline');

  -- Idempotency: calling room_create again with same nonce returns same id and does not duplicate
  SELECT room_create('Demo room', jsonb_build_object('participant_count', 3, 'submit_minutes', 1), 'nonce-demo-1') INTO rid2;
  PERFORM ok(rid2 = rid, 'room_create is idempotent with same client_nonce');
  SELECT count(*) INTO dup_count FROM rooms WHERE client_nonce = 'nonce-demo-1';
  PERFORM ok(dup_count = 1, 'room exists only once for given client_nonce');
END$$;

-- RPC existence: submission_upsert(round_id, author_id, content, claims, citations, canonical_sha256, client_nonce)
SELECT ok(
  to_regprocedure('submission_upsert(uuid,uuid,text,jsonb,jsonb,text,text)') IS NOT NULL,
  'submission_upsert exists'
);

DO $$
DECLARE
  room_id uuid;
  round_id uuid;
  author_id uuid;
  n text := 'nonce-sub-1';
  id1 uuid; id2 uuid;
BEGIN
  SELECT room_create('Test room', '{}'::jsonb, 'nonce-sub-room-1') INTO room_id;
  SELECT id INTO round_id FROM rounds WHERE room_id = room_id AND idx = 0;
  SELECT id INTO author_id FROM participants WHERE room_id = room_id LIMIT 1;
  SELECT submission_upsert(round_id, author_id, 'hello', '[]'::jsonb, '[]'::jsonb, 'deadbeef', n) INTO id1;
  SELECT submission_upsert(round_id, author_id, 'hello', '[]'::jsonb, '[]'::jsonb, 'deadbeef', n) INTO id2;
  PERFORM ok(id1 = id2, 'submission_upsert idempotent for same nonce');
END$$;

-- RPC existence: vote_submit(room_id, round_id, voter_id, kind, ballot, client_nonce)
SELECT ok(
  to_regprocedure('vote_submit(uuid,uuid,uuid,text,jsonb,text)') IS NOT NULL,
  'vote_submit exists'
);

DO $$
DECLARE
  room_id uuid;
  round_id uuid;
  voter_id uuid;
  n text := 'nonce-vote-1';
  id1 uuid; id2 uuid;
BEGIN
  SELECT room_create('Vote room', '{}'::jsonb, 'nonce-vote-room-1') INTO room_id;
  SELECT id INTO round_id FROM rounds WHERE room_id = room_id AND idx = 0;
  SELECT id INTO voter_id FROM participants WHERE room_id = room_id LIMIT 1;
  SELECT vote_submit(room_id, round_id, voter_id, 'continue', '{}'::jsonb, n) INTO id1;
  SELECT vote_submit(room_id, round_id, voter_id, 'continue', '{}'::jsonb, n) INTO id2;
  PERFORM ok(id1 = id2, 'vote_submit idempotent for same nonce');
END$$;

-- Round ops existence (skeleton)
SELECT ok(to_regprocedure('round_publish_due()') IS NOT NULL, 'round_publish_due exists');
SELECT ok(to_regprocedure('round_open_next()') IS NOT NULL, 'round_open_next exists');

-- Round ops callable without error (no-op acceptable in M1)
DO $$ BEGIN
  PERFORM round_publish_due();
  PERFORM round_open_next();
  PERFORM pass('round ops are callable');
END $$;

-- Edge cases: invalid inputs should raise exceptions
SELECT throws_ok(
  $$ SELECT room_create('', '{}'::jsonb, 'n1') $$,
  '22023',
  'room_create rejects empty topic'
);
SELECT throws_ok(
  $$ SELECT room_create('Bad participants', jsonb_build_object('participant_count', 0), 'n2') $$,
  '22023',
  'room_create rejects participant_count < 1'
);
SELECT throws_ok(
  $$ SELECT room_create('Bad minutes', jsonb_build_object('submit_minutes', 0), 'n3') $$,
  '22023',
  'room_create rejects submit_minutes < 1'
);

SELECT * FROM finish();
ROLLBACK;
